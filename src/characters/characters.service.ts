import { Injectable } from '@nestjs/common';
import { Character } from './entities/characters.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { InsertResult, Repository, UpdateResult } from 'typeorm';
import { Bond } from './entities/bonds.entity';

@Injectable()
export class CharactersService {

    constructor(
        @InjectRepository(Character)
        private charactersRepository: Repository<Character>,
        @InjectRepository(Bond)
        private bondRepository: Repository<Bond>
    ) { }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    async findAllCharacters(): Promise<Character[]> {
        return await this.charactersRepository.find();
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    findOneCharacter(character_id: string): Promise<Character | null> {
        return this.charactersRepository.findOneBy({ character_id });
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    insertCharacter(character: Character): Promise<InsertResult> {
        return this.charactersRepository.insert(character);
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
   ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    updateCharacter(character: Character): Promise<UpdateResult> {
        return this.charactersRepository.update(character.character_id, character);
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    removeCharacter(character_id: string): void {
        this.charactersRepository.delete({ character_id });
        return
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    async findAllBonds(): Promise<Bond[]> {
        return await this.bondRepository.find();
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    // findOneBond(bond_id: string): Promise<Bond | null> {
    //     // return this.bondRepository.findOneBy({  character_id, bond_id  });
    // }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    insertBond(bond: Bond): Promise<InsertResult> {
        return this.bondRepository.insert(bond);
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
   ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    updateBond(bond: Bond): Promise<UpdateResult> {
        return this.bondRepository.update(bond.bond_id, bond);
    }

    /*----------------------------------------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
    removeBond(character_id: string, bond_id: string): void {
        // this.bondRepository.find();
        return
    }
}
